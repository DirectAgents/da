#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LendingTreeLib.Common
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LendingTreeWeb")]
	public partial class DatabaseLoggerDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEventData(EventData instance);
    partial void UpdateEventData(EventData instance);
    partial void DeleteEventData(EventData instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertWebLogEntry(WebLogEntry instance);
    partial void UpdateWebLogEntry(WebLogEntry instance);
    partial void DeleteWebLogEntry(WebLogEntry instance);
    #endregion
		
		public DatabaseLoggerDatabase() : 
				base(global::LendingTreeLib.Properties.Settings.Default.LendingTreeWebConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseLoggerDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseLoggerDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseLoggerDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseLoggerDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EventData> EventDatas
		{
			get
			{
				return this.GetTable<EventData>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<WebLogEntry> WebLogEntries
		{
			get
			{
				return this.GetTable<WebLogEntry>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventData")]
	public partial class EventData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Xml.Linq.XElement _Data;
		
		private EntitySet<WebLogEntry> _WebLogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDataChanging(System.Xml.Linq.XElement value);
    partial void OnDataChanged();
    #endregion
		
		public EventData()
		{
			this._WebLogEntries = new EntitySet<WebLogEntry>(new Action<WebLogEntry>(this.attach_WebLogEntries), new Action<WebLogEntry>(this.detach_WebLogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventData_WebLogEntry", Storage="_WebLogEntries", ThisKey="Id", OtherKey="EventDataId")]
		public EntitySet<WebLogEntry> WebLogEntries
		{
			get
			{
				return this._WebLogEntries;
			}
			set
			{
				this._WebLogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebLogEntries(WebLogEntry entity)
		{
			this.SendPropertyChanging();
			entity.EventData = this;
		}
		
		private void detach_WebLogEntries(WebLogEntry entity)
		{
			this.SendPropertyChanging();
			entity.EventData = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<WebLogEntry> _WebLogEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EventType()
		{
			this._WebLogEntries = new EntitySet<WebLogEntry>(new Action<WebLogEntry>(this.attach_WebLogEntries), new Action<WebLogEntry>(this.detach_WebLogEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_WebLogEntry", Storage="_WebLogEntries", ThisKey="Id", OtherKey="EventTypeId")]
		public EntitySet<WebLogEntry> WebLogEntries
		{
			get
			{
				return this._WebLogEntries;
			}
			set
			{
				this._WebLogEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebLogEntries(WebLogEntry entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_WebLogEntries(WebLogEntry entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLogEntry")]
	public partial class WebLogEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Timestamp;
		
		private int _EventTypeId;
		
		private int _EventDataId;
		
		private EntityRef<EventData> _EventData;
		
		private EntityRef<EventType> _EventType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnEventTypeIdChanging(int value);
    partial void OnEventTypeIdChanged();
    partial void OnEventDataIdChanging(int value);
    partial void OnEventDataIdChanged();
    #endregion
		
		public WebLogEntry()
		{
			this._EventData = default(EntityRef<EventData>);
			this._EventType = default(EntityRef<EventType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeId", DbType="Int NOT NULL")]
		public int EventTypeId
		{
			get
			{
				return this._EventTypeId;
			}
			set
			{
				if ((this._EventTypeId != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EventTypeId = value;
					this.SendPropertyChanged("EventTypeId");
					this.OnEventTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDataId", DbType="Int NOT NULL")]
		public int EventDataId
		{
			get
			{
				return this._EventDataId;
			}
			set
			{
				if ((this._EventDataId != value))
				{
					if (this._EventData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventDataIdChanging(value);
					this.SendPropertyChanging();
					this._EventDataId = value;
					this.SendPropertyChanged("EventDataId");
					this.OnEventDataIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventData_WebLogEntry", Storage="_EventData", ThisKey="EventDataId", OtherKey="Id", IsForeignKey=true)]
		public EventData EventData
		{
			get
			{
				return this._EventData.Entity;
			}
			set
			{
				EventData previousValue = this._EventData.Entity;
				if (((previousValue != value) 
							|| (this._EventData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventData.Entity = null;
						previousValue.WebLogEntries.Remove(this);
					}
					this._EventData.Entity = value;
					if ((value != null))
					{
						value.WebLogEntries.Add(this);
						this._EventDataId = value.Id;
					}
					else
					{
						this._EventDataId = default(int);
					}
					this.SendPropertyChanged("EventData");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_WebLogEntry", Storage="_EventType", ThisKey="EventTypeId", OtherKey="Id", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.WebLogEntries.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.WebLogEntries.Add(this);
						this._EventTypeId = value.Id;
					}
					else
					{
						this._EventTypeId = default(int);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
