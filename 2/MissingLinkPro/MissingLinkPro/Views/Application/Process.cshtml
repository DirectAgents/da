@{
    ViewBag.Title = "Search Results";
}

@model MissingLinkPro.Models.ProcessHub

@*  *@
<br>
@*<p><h2>Results For This Run:</h2><br></p>
<br>
    <p>
    Search Query: @Model.BingSearchQuery <br>
    Text Search Within Results: @if (Model.PhraseSearchEnabled == true) { @Model.PhraseSearchString }
                                else { <text><i>(No Entry)</i></text>} <br>
    Excluding Phrase: @if (Model.ExcludeEnabled == true) { @Model.ExcludeString }
                                else { <text><i>(No Entry)</i></text>} <br>
    Target Website To Link To: @Model.ClientWebsite<br>
    Number of Results to Scan: @Model.top <br>
    Type of Results: @Model.ResultType <br>
    Exclude Results With Links to Target(s):
        @if (Model.ExcludeLinkbackResults == true) { <text>yes</text> }
        else { <text>no</text> }<br>
    </p> *@

<div style="padding-left: 30px;">
    <table style="float:left; margin-right: -190px;">
        <tr>
            <th>Legend</th><th> </th>
        </tr>
        <tr>
            <td><img src="~/Images/linkback_yes.png" alt="Links Back" /></td><td><p class="small">Links Back</p></td>
        </tr>
        <tr>
            <td><img src="~/Images/linkback_no.png" alt="No Linkback" /></td><td><p class="small">No Linkback</p></td>
        </tr>
        <tr>
            <td><img src="~/Images/linkback_err.png" alt="Error" /></td><td><p class="small">Error</p></td>
        </tr>
    </table>
</div>

<table class="table2" id="stats-table" style="margin: 0px auto;">

    <tr>
    <td class="results-a"><p class="small">Search Query:</p></td>
        <td class="results-b"><p class="small">@Model.BingSearchQuery</p></td>
    </tr>
    @*<tr>
    <td class="a">Text Search Within Results: </td>
        <td class="b">@if (Model.PhraseSearchEnabled == true) { @Model.PhraseSearchString }
                                else { <text><h8>No Entry</h8></text>}
        </td>
    </tr>*@
    <tr>
    <td class="results-a"><p class="small">Excluding Phrase:</p></td>
        <td class="results-b">@if (Model.ExcludeEnabled == true)
                              { <p class="small">@Model.ExcludeString</p> }
                              else
                              { <p class="small" style="color:lightgray">No Entry</p> }
        </td>
    </tr>
    <tr>
    <td class="results-a"><p class="small">Target Website To Link To:</p></td>
        <td class="results-b"><p class="small">@Model.ClientWebsite</p></td>
    </tr>
    <tr>
    <td class="results-a"><p class="small">Number of Results to Scan:</p></td>
        <td class="results-b"><p class="small">@Model.top</p></td>
    </tr>
    <tr>
    <td class="results-a"><p class="small">Type of Results:</p></td>
        <td class="results-b"><p class="small">@Model.ResultType</p></td>
    </tr>
    <tr>
    <td class="results-a"><p class="small">Exclude Results With Links to Target(s):</p></td>
        <td class="results-b">@if (Model.ExcludeLinkbackResults == true)
                              { <p class="small">Yes</p> }
                              else
                              { <p class="small">No</p> }</td>
    </tr>
    <tr>
    <td class="results-a"><p class="small">Number of Results Found:</p></td>
        <td class="results-b"<p class="small">@Model.ParsedResults.Count()</p></td>
    </tr>
    <tr>
        <td class="results-a"><p class="small">Results Omitted:</p></td>
        <td class="results-b"><p class="small">@Model.OmitCount</p></td>
    </tr>
    <tr>
        <td class="results-a"><p class="small">Total Time:</p></td>
        <td class="results-b"><p class="small">@Model.TotalRunTime sec</p></td>
    </tr>
    <tr>

    </tr>
</table>

<p class="text-success">@ViewBag.StatusMessage</p>

<div class="process-buttons" style="padding-top:30px;">
    <table style="margin-left:auto; margin-right:auto;">
        <tr>
    <td><a href="@Url.Action("ExportResults", "Application")" style="padding:5px;"><img src="@Url.Content("~/Images/btn_export.gif")"/></a></td>
    <td><a href="@Url.Action("Process", "Application")" style="padding:5px;" onclick="go();"><img src="@Url.Content("~/Images/btn_next.gif")"/></a></td>
            </tr>
        </table>
</div>

    @* @Html.ActionLink("Export All Mined Results to CSV", "ExportResults")<br>
    @Html.ActionLink("Next Set of Results (Will Add to Overall Collection)", "Process") *@

    <br>
@*    @if (Model.SearchErrorEncountered) {
    <p>ERROR: @Model.SearchErrorMsg</p>
    <br><br>
    }*@
        <table class="results-table">
        @if (Model.DisplayAllResults)
        {
          <tr>
          <th style="padding-right:30px; padding-bottom:15px;">Rank</th>
          <th>Result</th>
          <th style="padding-right:15px;">Status</th>
          @if (Model.ResultType.Equals("news"))
          { <th>Source</th> <th>Indexed</th> }
          </tr>
            <tr><td> </td></tr>
          foreach (MissingLinkPro.Models.ProcessHub.SearchResult s in Model.ParsedResults)
          {
              if (s.SkipThisResult) { continue; }
                <tr>
                    <td style="vertical-align:top; width:75px;"><b class="result-heading">@s.Id</b></td>
                    <td style="width:800px; max-width:800px; padding-right:10px;">
                        <p class="small"><a href="@s.Url">@s.Title</a><br>
                        @s.Url
                @if (s.ExceptionFound)
                {
                    <br />@Html.Raw("ERROR: ") @s.ErrorMsg
                    @*continue;*@
                }
                </p>

                @*@if (Model.PhraseSearchEnabled) {
                    if (s.ContainsSearchPhrase) {
                        @Html.Raw(" - OK: Site contains instances of given phrase.")<br>
                    }
                    else {
                        @Html.Raw(" - NOTE: Given phrase not found.")<br>
                    }
                }*@
                        <br>
                    </td>
                    <td class="linkback-graphic">
                        @if (s.LinksToClientWebsite)
                        {
                            <img src="~/Images/linkback_yes.png" />
                        }
                        else if (s.ExceptionFound)
                        {
                            <img src="~/Images/linkback_err.png"/>
                        }
                        else
                        {
                            <img src="~/Images/linkback_no.png"/>
                        }
                    </td>
                    @if (Model.ResultType.Equals("news"))
                    {
                    <td style="vertical-align:top; padding-right:10px; text-align:center;"><p class="small">@s.Source</p></td>
                    <td style="vertical-align:top; text-align:center;"><p class="small">@s.Date</p></td>
                    }
                </tr>

          }
        }
        </table>

@if (Model.DisplayAllResults)
{
<div class="process-buttons" style="padding-top:30px;">
    <table style="margin-left:auto; margin-right:auto;">
        <tr>
    <td><a href="@Url.Action("ExportResults", "Application")" style="padding:5px;"><img src="@Url.Content("~/Images/btn_export.gif")"/></a></td>
    <td><a href="@Url.Action("Process", "Application")" style="padding:5px;" onclick="go();"><img src="@Url.Content("~/Images/btn_next.gif")"/></a></td>
            </tr>
        </table>
</div>
}
    <br><br><br><br>

@section Scripts {
<script type="text/javascript" src="~/Scripts/spin.js"></script>
<script>
    function go() {
        debugger;
            var opts = {
                lines: 13, // The number of lines to draw
                length: 20, // The length of each line
                width: 10, // The line thickness
                radius: 30, // The radius of the inner circle
                corners: 1, // Corner roundness (0..1)
                rotate: 0, // The rotation offset
                direction: 1, // 1: clockwise, -1: counterclockwise
                color: '#000', // #rgb or #rrggbb or array of colors
                speed: 1, // Rounds per second
                trail: 60, // Afterglow percentage
                shadow: false, // Whether to render a shadow
                hwaccel: false, // Whether to use hardware acceleration
                className: 'spinner', // The CSS class to assign to the spinner
                zIndex: 2e9, // The z-index (defaults to 2000000000)
                top: '50%', // Top position relative to parent
                left: '50%' // Left position relative to parent
            };
            var target = document.getElementById('stats-table');
            var spinner = new Spinner(opts).spin(target);
        }
</script>
}